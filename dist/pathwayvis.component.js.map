{"version":3,"sources":["pathwayvis.component.ts"],"names":[],"mappings":";AAAA,6CAA6C;AAC7C,IAAY,OAAO,WAAM,SAAS,CAAC,CAAA;AAEnC,0DAA0D;AAC1D,qCAAqC;AACrC,6BAA8B,cAAc,CAAC,CAAA;AAG7C,QAAO,gBAAgB,CAAC,CAAA;AACxB,QAAO,eAAe,CAAC,CAAA;AACvB,QAAO,mBAAmB,CAAC,CAAA;AAC3B,QAAO,mCAAmC,CAAC,CAAA;AAE9B,sBAAc,GAAG,YAAY,CAAC;AAC3C,IAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,sBAAc,EAAE;IACxC,yBAAyB;IACzB,wBAAwB;IACxB,uBAAuB;CAC1B,CAAC,CAAC;AAEH,gHAAgH;AAChH,IAAI,CAAC,MAAM,CAAC,UAAU,gBAAgB;IAClC,gBAAgB;SACX,QAAQ,CAAC,sBAAc,EAAE;QACtB,OAAO,EAAE;YACL,MAAM,EAAE,CAAC,EAAC,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC;YACzC,IAAI,EAAE,gCAAgC;SACzC;KACJ,CAAC;SACD,KAAK,CAAC,sBAAc,EAAE;QACnB,GAAG,EAAE,MAAI,sBAAgB;QACzB,KAAK,EAAE;YACH,UAAU,EAAE;gBACR,WAAW,EAAK,sBAAO,CAAC,MAAM,CAAC,EAAE,CAAC,qCAAkC;gBACpE,UAAU,EAAE,6BAA6B;gBACzC,YAAY,EAAE,MAAM;aACvB;SACJ;QACD,OAAO,YAAC,MAAc;YAClB,+BAA+B;YAC/B,4CAA4C;YAC5C,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QACnC,CAAC;QACD,MAAM,YAAC,MAAc;YACjB,+BAA+B;YAC/B,4CAA4C;YAC5C,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAC9B,CAAC;KACJ,CAAC,CAAC;AACX,CAAC,CAAC,CAAC;AAGH;IAGI,uCAAY,MAAc,EAAE,OAAO;QAC/B,+BAA+B;QAC/B,4CAA4C;QAC5C,IAAI,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QAC9C,iCAAiC;QACjC,IAAI,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAEnC,oBAAoB;QACpB,IAAI,CAAC,MAAM,GAAG;YACV,OAAO,EAAE,CAAC;YACV,GAAG,EAAE,EAAE;YACP,QAAQ,EAAE,EAAE;SACf,CAAC;IACN,CAAC;IACL,oCAAC;AAAD,CAjBA,AAiBC,IAAA;AAED;kBAAe,IAAI,CAAC","file":"pathwayvis.component.js","sourcesContent":["/// <reference path=\"../typings/index.d.ts\"/>\nimport * as angular from 'angular';\n\n// Turn of WS TS inspection for the 'decaf-common' import.\n// noinspection TypeScriptCheckImport\nimport {Config, dirname} from 'decaf-common';\nimport * as types from './types';\n\nimport './services/api';\nimport './services/ws';\nimport './components/base';\nimport './views/pathwayvis.component.css!';\n\nexport const COMPONENT_NAME = 'pathwayvis';\nconst main = angular.module(COMPONENT_NAME, [\n    'pathwayvis.services.api',\n    'pathwayvis.services.ws',\n    'pathwayvis.components'\n]);\n\n// TODO: we need to make it so the module name and the .register() are decoupled and not dependant on each other\nmain.config(function (platformProvider) {\n    platformProvider\n        .register(COMPONENT_NAME, {\n            sharing: {\n                accept: [{type: 'money', multiple: true}],\n                name: 'Decaf Visualisations Component'\n            }\n        })\n        .state(COMPONENT_NAME, {\n            url: `/${COMPONENT_NAME}`,\n            views: {\n                'content@': {\n                    templateUrl: `${dirname(module.id)}/views/pathwayvis.component.html`,\n                    controller: PathwayVisComponentController,\n                    controllerAs: 'ctrl'\n                }\n            },\n            onEnter(config: Config) {\n                // Turn of WS inspection for TS\n                // noinspection TypeScriptUnresolvedFunction\n                config.set('color', '#34495e');\n            },\n            onExit(config: Config) {\n                // Turn of WS inspection for TS\n                // noinspection TypeScriptUnresolvedFunction\n                config.set('color', null);\n            }\n        });\n});\n\n\nclass PathwayVisComponentController {\n    public shared: types.Shared;\n\n    constructor(config: Config, sharing) {\n        // Turn of WS inspection for TS\n        // noinspection TypeScriptUnresolvedFunction\n        let component = config.get('componentConfig');\n        // Data from the sharing provider\n        let money = sharing.items('money');\n\n        // Init shared scope\n        this.shared = {\n            loading: 0,\n            map: {},\n            sections: {}\n        };\n    }\n}\n\nexport default main;\n"]}